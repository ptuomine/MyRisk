/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/battle.js":
/*!***********************!*\
  !*** ./src/battle.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var consts = __webpack_require__(/*! ./consts */ \"./src/consts.js\");\r\n\r\nvar Battle = {\r\n\r\n    go: function(regionAttack, regionDefense) {\r\n\r\n        var defendingtroops = regionDefense.getTroopCount();\r\n        var attackingtroops = regionAttack.getTroopCount() - 1;\r\n        var defendleft = defendingtroops - attackingtroops; // defending troops left after attack\r\n        var attackleft = Math.abs(defendleft);\r\n\r\n        regionAttack.setTroopCount(1); // Allways one left in the attacking square\r\n\r\n        if (defendleft < 0) {\r\n            // attack successful\r\n            var attackingplayer = regionAttack.getPlayer();\r\n            var defendingplayer = regionDefense.getPlayer();\r\n            regionDefense.setPlayer(attackingplayer);\r\n            regionDefense.setTroopCount(attackleft);\r\n            attackingplayer.addRegion(regionDefense);\r\n            defendingplayer.removeRegion(regionDefense);\r\n            attackingplayer.cardEarned();\r\n\r\n            // Check continent\r\n            var continent = regionDefense.getContinent();\r\n            continent.checkContinentOwner();\r\n\r\n            return true;\r\n        } else {\r\n            // attack failed\r\n            regionDefense.setTroopCount(defendleft);\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Battle;\n\n//# sourceURL=webpack://myrisk/./src/battle.js?");

/***/ }),

/***/ "./src/canvas.js":
/*!***********************!*\
  !*** ./src/canvas.js ***!
  \***********************/
/***/ ((module) => {

eval("var continentsArea = document.getElementById('continentsArea'); \r\n\r\nvar newgameel = document.getElementById(\"newgame\");\r\nvar startwarel = document.getElementById(\"startwar\");\r\nvar gobattleel = document.getElementById(\"gobattle\");\r\nvar endturnel = document.getElementById(\"endturn\");\r\nvar sellcardsel = document.getElementById(\"sellcards\");\r\n\r\nvar GameCanvas = {\r\n\r\n    addContinent: function(continent) {\r\n        continentsArea.appendChild(continent.element);\r\n    },\r\n    addDivRow: function() {\r\n        var divrow = document.createElement(\"div\");\r\n        divrow.classList.add(\"Row\");\r\n        continentsArea.appendChild(divrow);\r\n    },\r\n    reset: function() {\r\n        startwarel.disabled = true;\r\n        endturnel.disabled = true;\r\n        gobattleel.disabled = true;\r\n        sellcardsel.disabled = true;\r\n    },\r\n    enablewar: function(enable) {\r\n        startwarel.disabled = !enable;\r\n    },\r\n    enablebattle: function(enable) {\r\n        gobattleel.disabled = !enable;\r\n    },\r\n    enableendturn: function(enable) {\r\n        endturnel.disabled = !enable;\r\n    },\r\n    enablesellcards: function(enable) {\r\n        sellcardsel.disabled = !enable;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = GameCanvas;\n\n//# sourceURL=webpack://myrisk/./src/canvas.js?");

/***/ }),

/***/ "./src/carddeck.js":
/*!*************************!*\
  !*** ./src/carddeck.js ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var util = __webpack_require__(/*! ./util.js */ \"./src/util.js\");\r\n\r\nvar cards = [];\r\n\r\nvar infantry = {\r\n    id: 1,\r\n    points: 2,\r\n    display: \"#\"\r\n}\r\n\r\nvar cavalry = {\r\n    id: 2,\r\n    points: 3,\r\n    display: \"£\"\r\n}\r\n\r\nvar artillery = {\r\n    id: 3,\r\n    points: 4,\r\n    display: \"¤\"\r\n}\r\n\r\nvar wildcard = {\r\n    id: 4,\r\n    points: 0,\r\n    display: \"%\"\r\n}\r\n\r\nvar allthree = [artillery, cavalry, infantry]\r\n\r\nvar infantryCount = 10;\r\nvar cavalryCount = 10;\r\nvar artilleryCount = 10;\r\nvar wildcardCount = 2;\r\n\r\nvar CardDeck = {\r\n\r\n    infantryPoints: 2,\r\n    cavarlryPoints: 3,\r\n    artilleryPoints: 4,\r\n\r\n    WildCard: wildcard,\r\n\r\n    AllTreeCards: allthree,\r\n\r\n    Infantry: infantry,\r\n    Cavalry: cavalry,\r\n    Artillery: artillery,\r\n\r\n    init: function() {\r\n\r\n        cards = [];\r\n\r\n        for (i=0; i<=infantryCount; i++) {\r\n            cards.push(infantry);\r\n        }\r\n        for (i=0; i<=cavalryCount; i++) {\r\n            cards.push(cavalry);\r\n        }\r\n        for (i=0; i<=artilleryCount; i++) {\r\n            cards.push(artillery);\r\n        }\r\n        for (i=0; i<=wildcardCount; i++) {\r\n            cards.push(wildcard);\r\n        }\r\n        util.shuffleArray(cards);\r\n\r\n    },\r\n    getCard: function() {\r\n\r\n        if (cards.length == 0) this.init();\r\n        return cards.pop();\r\n    },\r\n    isWildCard: function(card) {\r\n        return card.id == wildcard.id;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = CardDeck;\n\n//# sourceURL=webpack://myrisk/./src/carddeck.js?");

/***/ }),

/***/ "./src/consts.js":
/*!***********************!*\
  !*** ./src/consts.js ***!
  \***********************/
/***/ ((module) => {

eval("var continent_columns = 2;\r\nvar continent_rows = 2;\r\nvar continent_width = 2;\r\nvar continent_height = 2;\r\nvar region_width = 50;\r\nvar region_height = 50;\r\nvar noplayer = \"FREE\"\r\nvar players = [ \"p1\", \"p2\" ];\r\nvar player_count = 3;\r\nvar player_colors = ['#00af9d','#ffb652','#cd66cc','#66bc29','#0096db','#3a7dda','#ffe100'];\r\n\r\nvar total_regions = continent_columns * continent_width * continent_rows * continent_height;\r\nvar total_troops_each = total_regions * 1.25;\r\n\r\nvar gamestats = [\"player\", \"continents\", \"regions\", \"troops\", \"drafts\", \"cards\"];\r\n\r\nvar exports = module.exports = {};\r\n\r\nexports.CONTINENT_COLUMNS =  continent_columns;\r\nexports.CONTINENT_ROWS =  continent_rows;\r\nexports.CONTINENT_WIDTH =  continent_width;\r\nexports.CONTINENT_HEIGHT =  continent_height;\r\nexports.REGION_WIDTH =  region_width;\r\nexports.REGION_HEIGHT =  region_height;\r\nexports.PLAYERS = players;\r\nexports.NOPLAYER = noplayer;\r\nexports.PLAYER_COLORS = player_colors;\r\nexports.TOTAL_TROOPS_EACH = total_troops_each;\r\nexports.PLAYER_COUNT = player_count;\r\nexports.GAMESTATS_HEADINGS = gamestats;\r\n\n\n//# sourceURL=webpack://myrisk/./src/consts.js?");

/***/ }),

/***/ "./src/continent.js":
/*!**************************!*\
  !*** ./src/continent.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var consts = __webpack_require__(/*! ./consts.js */ \"./src/consts.js\");\r\n\r\nvar Continent = function (row, col) {\r\n\r\n    var row = row;\r\n    var col = col;\r\n\r\n    var cont_width = consts.CONTINENT_WIDTH * consts.REGION_WIDTH;\r\n    var cont_height = consts.CONTINENT_HEIGHT * consts.REGION_HEIGHT;\r\n\r\n    var owner = consts.NOPLAYER;\r\n\r\n    var regions = [];\r\n\r\n    function getContinentElement() {\r\n        var cont = document.createElement(\"div\");\r\n        cont.id = \"continent_\" + row + \"_\" + col;\r\n        cont.style.height = cont_height + \"px\";\r\n        cont.style.width = cont_width + \"px\";\r\n        cont.style.border = \"3px solid #d3d3d3\";\r\n        cont.style.color = \"blue\";\r\n        cont.classList.add(\"Column\");\r\n\r\n        return cont;\r\n    }\r\n\r\n    function getOldOwner() {\r\n\r\n        return owner;\r\n    }\r\n\r\n    function getNewOwner() {\r\n\r\n        if (regions.every(r => r.getPlayer() == regions[0].getPlayer())) {\r\n            // if all regions have the same occupant then return that one\r\n            owner = regions[0].getPlayer();\r\n            return owner\r\n        }\r\n        return consts.NOPLAYER;;\r\n    }\r\n\r\n    this.element = getContinentElement();\r\n\r\n    this.getId = function () {\r\n        return row + \"_\" + col;\r\n    }\r\n\r\n    this.addRegion = function (region) {\r\n        this.element.appendChild(region.element);\r\n        regions.push(region);\r\n    }\r\n\r\n    this.addNewLine = function () {\r\n        this.element.appendChild(document.createElement(\"br\"));\r\n    }\r\n\r\n    this.getColumn = function () {\r\n        return col;\r\n    }\r\n\r\n    this.getRow = function () {\r\n        return row;\r\n    }\r\n\r\n    this.getContinentPoints = function () {\r\n        return Math.floor(regions.length / 2);\r\n    }\r\n\r\n    this.checkContinentOwner = function () {\r\n\r\n        var oldOwner = getOldOwner();\r\n        var newOwner = getNewOwner();\r\n        if (oldOwner != consts.NOPLAYER) {\r\n            oldOwner.removeContinent(this);\r\n        }\r\n        if (newOwner != consts.NOPLAYER) {\r\n            newOwner.addContinent(this);\r\n        }\r\n\r\n        owner = newOwner;\r\n\r\n        return owner;\r\n    }\r\n}\r\n\r\nvar ContinentFactory = {\r\n\r\n    getContinentInstance(row, col) {\r\n        return new Continent(row, col);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = ContinentFactory;\n\n//# sourceURL=webpack://myrisk/./src/continent.js?");

/***/ }),

/***/ "./src/gameboard.js":
/*!**************************!*\
  !*** ./src/gameboard.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var canvas = __webpack_require__(/*! ./canvas.js */ \"./src/canvas.js\");\r\nvar consts = __webpack_require__(/*! ./consts.js */ \"./src/consts.js\");\r\nvar continentFactory = __webpack_require__(/*! ./continent.js */ \"./src/continent.js\");\r\nvar regionFactory = __webpack_require__(/*! ./region.js */ \"./src/region.js\");\r\nvar gamePlayers = __webpack_require__(/*! ./gameplayers.js */ \"./src/gameplayers.js\");\r\nvar gamecontroller = __webpack_require__(/*! ./gamecontroller.js */ \"./src/gamecontroller.js\");\r\nvar util = __webpack_require__(/*! ./util.js */ \"./src/util.js\");\r\n\r\nvar regions = [];\r\nvar continents = [];\r\n\r\nvar GameBoard = {\r\n    init: function () {\r\n\r\n        this.reset();\r\n\r\n        // Build game board\r\n        for (var row = 1; row <= consts.CONTINENT_ROWS; row++) {\r\n            canvas.addDivRow();\r\n            for (var col = 1; col <= consts.CONTINENT_COLUMNS; col++) {\r\n                var continent = buildContinent(row, col);\r\n                continents.push(continent);\r\n            }\r\n        }\r\n\r\n        function buildContinent(cont_row, cont_col) {\r\n            var contobj = continentFactory.getContinentInstance(row, col);\r\n            buildRegions(row, col, contobj);\r\n            canvas.addContinent(contobj);\r\n            return contobj;\r\n        }\r\n\r\n        function buildRegions(cont_row, cont_col, contobj) {\r\n\r\n            for (i = 1; i <= consts.CONTINENT_WIDTH; i++) {\r\n                for (j = 1; j <= consts.CONTINENT_HEIGHT; j++) {\r\n\r\n                    var regionrow = consts.CONTINENT_HEIGHT * (cont_row - 1) + i;\r\n                    var regioncol = consts.CONTINENT_WIDTH * (cont_col - 1) + j;\r\n\r\n                    var regobj = regionFactory.getRegionInstance(regionrow, regioncol, contobj);\r\n                    regions.push(regobj);\r\n                    contobj.addRegion(regobj);\r\n                }\r\n                contobj.addNewLine();\r\n            }\r\n        }\r\n    },\r\n    startGame: function() {\r\n\r\n\r\n        // setup the random game board\r\n\r\n        // First assign one troop to each region\r\n        var players = gamePlayers.getAllPlayers();\r\n        util.shuffleArray(regions);\r\n        regions.forEach(function(region, index) {\r\n            var player = players[index%players.length]; \r\n            region.setPlayer(player);\r\n            region.addTroops();\r\n            player.addRegion(region);\r\n        });\r\n\r\n        if (continents.some(c=>c.checkContinentOwner() != consts.NOPLAYER)) {\r\n            // none of the continents should be owned in the beginning\r\n            players.forEach(p=>p.reset());\r\n            regions.forEach(r=>r.reset());\r\n            this.startGame(); \r\n        }\r\n\r\n        // Second assign rest of the player troops to its regions\r\n        players.forEach(p=>p.AssignTroopsToRegions());\r\n\r\n\r\n    },\r\n    reset: function () {\r\n        canvas.reset();\r\n        regions.forEach(reg => reg.reset());\r\n        gamePlayers.reset();\r\n        gamecontroller.reset();\r\n\r\n    },\r\n    startWar: function() {\r\n        canvas.enablewar(false);\r\n        regions.forEach(reg=>reg.gameStateChange());\r\n    },\r\n    goBattle: function() {\r\n        gamecontroller.goBattle();\r\n    },\r\n    nextTurn: function() {\r\n        this.startWar();\r\n        gamecontroller.nextTurn();\r\n    }\r\n}\r\n\r\nmodule.exports = GameBoard;\r\n\n\n//# sourceURL=webpack://myrisk/./src/gameboard.js?");

/***/ }),

/***/ "./src/gamecontroller.js":
/*!*******************************!*\
  !*** ./src/gamecontroller.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var battle = __webpack_require__(/*! ./battle.js */ \"./src/battle.js\");\r\nvar playerstats = __webpack_require__(/*! ./playerstats.js */ \"./src/playerstats.js\");\r\nvar canvas = __webpack_require__(/*! ./canvas */ \"./src/canvas.js\");\r\n\r\nvar attackerSelection;\r\nvar defenderSelection;\r\nvar playerInTurn;\r\n\r\nfunction isBattlePossible() {\r\n    return attackerSelection && defenderSelection\r\n}\r\n\r\nvar GameController = {\r\n\r\n    init: function () {\r\n        this.reset();\r\n    },\r\n    reset: function() {\r\n        playerInTurn = playerstats.getFirstPlayer();\r\n        attackerSelection = null;\r\n        defenderSelection = null;\r\n    },\r\n    nextTurn: function() {\r\n        playerInTurn.endTurn();\r\n        playerInTurn = playerstats.nextPlayer(); // change the player in turn\r\n        playerInTurn.startTurn();\r\n\r\n        attackerSelection = null;\r\n        defenderSelection = null;\r\n    },\r\n    getPlayerInTurn: function() {\r\n        return playerInTurn;\r\n    },\r\n    setSelectedRegion: function(region) {\r\n\r\n        if (!region.isSelected()) {\r\n            // Selected false, i.e. deselection\r\n            if (region.getPlayer().isSame(this.getPlayerInTurn())) {\r\n                attackerSelection = null;\r\n            } else {\r\n                defenderSelection = null;\r\n            }\r\n            canvas.enablebattle(isBattlePossible());\r\n            return;\r\n        }\r\n        // Selected = true\r\n        if (region.getPlayer().isSame(this.getPlayerInTurn())) {\r\n            // Set the attacker\r\n            if (attackerSelection) attackerSelection.setSelection(false); // deselect if already selected\r\n            attackerSelection = region;\r\n        } else if (attackerSelection){\r\n            // Attacker already set. Set defender\r\n            if (!attackerSelection.canAttack(region)) {\r\n                // selection not legal\r\n                region.setSelection(false); \r\n                return;\r\n            }\r\n            if (defenderSelection) defenderSelection.setSelection(false); // deselect if already selected\r\n            defenderSelection = region;\r\n        } else {\r\n            // Attacker not yet set. Cannot set defender yet.\r\n            region.setSelection(false);\r\n        }\r\n        canvas.enablebattle(isBattlePossible());\r\n\r\n    },\r\n    goBattle: function() {\r\n        if (!isBattlePossible()) {\r\n            alert('not everything selected!');\r\n            return;\r\n        }\r\n        var win = battle.go(attackerSelection, defenderSelection);\r\n        if (win) {\r\n            // Defender region will become selected as attacker. Defender has to be selected next\r\n            attackerSelection.setSelection(false);\r\n            attackerSelection = defenderSelection;\r\n            defenderSelection = null;\r\n        } else {\r\n            // nothing selected\r\n            attackerSelection.setSelection(false);\r\n            defenderSelection.setSelection(false);\r\n            attackerSelection = null;\r\n            defenderSelection = null;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = GameController;\n\n//# sourceURL=webpack://myrisk/./src/gamecontroller.js?");

/***/ }),

/***/ "./src/gameplayers.js":
/*!****************************!*\
  !*** ./src/gameplayers.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var consts = __webpack_require__(/*! ./consts.js */ \"./src/consts.js\");\r\nvar playerFactory = __webpack_require__(/*! ./player.js */ \"./src/player.js\");\r\n\r\nvar players = [];\r\n\r\nvar random = 0;\r\n\r\nvar GamePlayers = {\r\n    init: function () {\r\n        // Build players\r\n        for (var i = 0; i < consts.PLAYER_COUNT; i++) {\r\n            players.push(playerFactory.getPlayerInstance());\r\n        }\r\n    },\r\n    getAllPlayers: function() {\r\n        return players;\r\n    },\r\n    getAlivePlayers: function() {\r\n        return players.filter(p=>!p.isDead());\r\n    },\r\n    getRandomPlayer2: function() {\r\n\r\n        var randomIndex = Math.floor(Math.random() * players.length);;\r\n        random = random < players.length-1 ? random  + 1: 0;\r\n        return players[randomIndex];\r\n    },\r\n    getRandomPlayer: function() {\r\n        var randomIndex = random;\r\n        random = random < players.length-1 ? random  + 1: 0;\r\n        return players[randomIndex];\r\n    },\r\n    reset: function() {\r\n        players.forEach(player=>player.reset());\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = GamePlayers;\r\n\n\n//# sourceURL=webpack://myrisk/./src/gameplayers.js?");

/***/ }),

/***/ "./src/gamestate.js":
/*!**************************!*\
  !*** ./src/gamestate.js ***!
  \**************************/
/***/ ((module) => {

eval("\r\nvar gamestate = \"nostate\";\r\n\r\nvar GameState = {\r\n    startGame: function () {\r\n\r\n    },\r\n    init: function () {\r\n        this.setGameState(this.StartState);\r\n    },\r\n    reset: function() {\r\n    },\r\n    setGameState: function(state) {\r\n        gamestate = state;\r\n    },\r\n    getGameState: function() {\r\n        return gamestate;\r\n    },\r\n    StartState: \"Start\",\r\n    BattleState: \"Battle\"\r\n}\r\n\r\nmodule.exports = GameState;\n\n//# sourceURL=webpack://myrisk/./src/gamestate.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var gameboard = __webpack_require__(/*! ./gameboard.js */ \"./src/gameboard.js\");\r\nvar gameplayers = __webpack_require__(/*! ./gameplayers */ \"./src/gameplayers.js\");\r\nvar gamecontroller = __webpack_require__(/*! ./gamecontroller */ \"./src/gamecontroller.js\");\r\nvar playerstats = __webpack_require__(/*! ./playerstats.js */ \"./src/playerstats.js\");\r\nvar gamestate = __webpack_require__(/*! ./gamestate.js */ \"./src/gamestate.js\");\r\nvar deck = __webpack_require__(/*! ./carddeck.js */ \"./src/carddeck.js\");\r\n\r\nwindow.resetGameBoard = function() {\r\n    console.log(\"reset game2 board\");\r\n\r\n    gamestate.setGameState(gamestate.StartState);\r\n    gameboard.reset();\r\n    gameboard.startGame();\r\n    playerstats.reset();\r\n    playerstats.updateStats();\r\n    deck.init();\r\n}\r\n\r\nwindow.startWar = function() {\r\n    console.log(\"start war\");\r\n    gamestate.setGameState(gamestate.BattleState);\r\n    gameboard.startWar();\r\n}\r\n\r\nwindow.goBattle = function() {\r\n    console.log(\"go battle\");\r\n    gameboard.goBattle();\r\n    playerstats.updateStats();\r\n}\r\n\r\nwindow.endTurn = function() {\r\n    console.log(\"end turn\");\r\n    gamestate.setGameState(gamestate.StartState);\r\n    gameboard.nextTurn();\r\n    playerstats.updateStats();\r\n}\r\n\r\nwindow.sellCards = function() {\r\n    this.console.log(\"sell cards\");\r\n    playerstats.sellCards();\r\n    playerstats.updateStats();\r\n}\r\n\r\n// initialize game\r\ngameplayers.init(); // initialize the game players\r\nplayerstats.init(); // initiaize the player statistics\r\ngamecontroller.init(); // initiize the game controller\r\ngamestate.init(); // initialize the game state\r\ngameboard.init(); // build game board\r\ndeck.init();\r\n\r\ngameboard.startGame();\r\nplayerstats.reset();\r\nplayerstats.updateStats();\r\n\n\n//# sourceURL=webpack://myrisk/./src/main.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var consts = __webpack_require__(/*! ./consts */ \"./src/consts.js\");\r\nvar deck = __webpack_require__(/*! ./carddeck */ \"./src/carddeck.js\");\r\nvar util = __webpack_require__(/*! ./util */ \"./src/util.js\");\r\n\r\nfunction player(id, name, color) {\r\n    var id = id;\r\n    var name = name;\r\n    var color = color;\r\n    var state = {};\r\n    var cardEarned = false;\r\n\r\n    this.reset = function () {\r\n        state.regions = [];\r\n        state.continents = [];\r\n        state.getTroopCount = function () {\r\n            return state.regions.reduce((a, b) => a + b.getTroopCount(), 0);\r\n        };\r\n        state.cards = [];\r\n        state.draft = consts.TOTAL_TROOPS_EACH;\r\n        cardEarned = false;\r\n    }\r\n\r\n    this.addRegion = function (region) {\r\n        state.regions.push(region);\r\n        state.troops = state.troops + region.getTroopCount();\r\n    }\r\n\r\n    this.removeRegion = function (region) {\r\n        state.regions = state.regions.filter(reg => !reg.isSame(region));\r\n    }\r\n\r\n    this.addContinent = function (continent) {\r\n        state.continents.push(continent);\r\n    }\r\n\r\n    this.removeContinent = function (continent) {\r\n        state.continents = state.continents.filter(c => continent.getId() != c.getId());\r\n    }\r\n\r\n    this.getName = function () {\r\n        return name;\r\n    }\r\n\r\n    this.getColor = function () {\r\n        return color;\r\n    }\r\n\r\n    this.getState = function () {\r\n        return state;\r\n    }\r\n\r\n    this.setDraft = function (count) {\r\n        state.draft = count;\r\n    }\r\n\r\n    this.isSame = function (p) {\r\n        return p.getName() == this.getName();\r\n    }\r\n\r\n    this.isDead = function () {\r\n        return state.regions.length == 0;\r\n    }\r\n\r\n    this.reduceDraft = function () {\r\n\r\n        if (state.draft == 0) return false; // cannot reduce\r\n        state.draft--;\r\n        return true;\r\n\r\n    }\r\n\r\n    this.endTurn = function () {\r\n        if (cardEarned) {\r\n            var card = deck.getCard();\r\n            state.cards.push(card);\r\n        }\r\n\r\n        cardEarned = false;\r\n    }\r\n\r\n    this.startTurn = function () {\r\n\r\n        // Set the draft count\r\n        var regionpoints = state.regions.length < 3 ? state.regions.length / 3 : 3;\r\n        var continentpoints = state.continents.reduce((a, b) => a + b.getContinentPoints(), 0);\r\n        state.draft += regionpoints + continentpoints;\r\n    }\r\n\r\n    this.AssignTroopsToRegions = function () {\r\n\r\n        do {\r\n            var randomregionindex = Math.floor(Math.random() * state.regions.length);\r\n            var success = state.regions[randomregionindex].addTroops();\r\n        } while (success);\r\n    }\r\n\r\n    this.cardEarned = function () {\r\n        cardEarned = true;\r\n    }\r\n\r\n    this.sellCards = function () {\r\n\r\n        if (state.cards.length < 3) return; // not enough cards\r\n\r\n        // number of wild cards\r\n        var wilds = state.cards.filter(c => c.id == 4).length;\r\n\r\n        var allthree = deck.AllTreeCards;\r\n\r\n        var permutations = [];\r\n        var permutatedCards = [];\r\n\r\n        if (wilds == 1) {\r\n            permutations = allthree;\r\n\r\n        } else if (wilds == 2) {\r\n            // Get permutations for two wild cards\r\n            for (var i = 0; i < allthree.length; i++) {\r\n                for (var j = i; j < allthree.length; j++) {\r\n                    var permutation = [allthree[i], allthree[j]];\r\n                    permutations.push(permutation);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Get all cards that are not wild cards\r\n        var nonwildcards = state.cards.filter(c => c.id != 4);\r\n        // add the non wild cards to the permutations\r\n        permutatedCards = permutations.map(p => nonwildcards.concat(p).sort((a, b) => {\r\n            return b.points - a.points;\r\n        }));\r\n\r\n        // If there are no wild card permutations then use just the one, but sorted\r\n        if (!permutatedCards.length) permutatedCards = [state.cards.sort((a, b) => {\r\n            return b.points - a.points;\r\n        })];\r\n\r\n        // Go through all possible permutations of the (wild) cards\r\n        var validSetsOfThree = [];\r\n        permutatedCards.forEach(p => {\r\n            var sets = checkcards(p);\r\n            validSetsOfThree = validSetsOfThree.concat(sets);\r\n        });\r\n\r\n        // Atleast one valid set of three was found\r\n        if (validSetsOfThree.length > 0) {\r\n\r\n            function getPoints(set) {\r\n                return set.reduce((a, b) => a + b.points, 0);\r\n            }\r\n\r\n            // Find the set with best points\r\n            const bestset = validSetsOfThree.reduce(function (setA, setB) {\r\n                return (getPoints(setA) > getPoints(setB)) ? setA : setB\r\n            })\r\n\r\n            // trade/sell the cards in the set\r\n            var points = getPoints(bestset);\r\n            state.draft += points;\r\n            bestset.forEach(s => {\r\n                // find the card with the same amount of points\r\n                var index = state.cards.findIndex(function (c) {\r\n                    return c.points == s.points;\r\n                });\r\n                if (index == -1) {\r\n                    // find a wild card instead\r\n                    index = state.cards.findIndex(function (c) {\r\n                        return deck.isWildCard(c);\r\n                    });\r\n                }\r\n                state.cards.splice(index, 1); // remove the card from the found index\r\n            });\r\n        }\r\n\r\n        function checkcards(permutation) {\r\n\r\n            // array of valid sets found\r\n            var setsfound = [];\r\n\r\n            // current set\r\n            var setofthree = permutation.slice(0, 3);\r\n\r\n            // all different\r\n            if (util.isAllUnique(setofthree.map(s => s.id))) {\r\n                setsfound.push(setofthree);\r\n            } else\r\n                // all same\r\n                if (setofthree.every(c => c.id === setofthree[0].id)) {\r\n                    setsfound.push(setofthree);\r\n                }\r\n            // check next three (if exists)\r\n            if (permutation.length > 3) {\r\n                var moresets = checkcards(permutation.slice(1, permutation.length));\r\n                setsfound = setsfound.concat(moresets);\r\n            }\r\n            return setsfound; // no valid set found\r\n        }\r\n    }\r\n}\r\n\r\nvar colors = consts.PLAYER_COLORS;\r\nvar playerid = 0;\r\n\r\nvar PlayerFactory = {\r\n    getPlayerInstance: function () {\r\n\r\n        if (playerid > colors.length - 1) return null; // no more colors left\r\n\r\n        var color = colors[playerid];\r\n        playerid++;\r\n        var newplayer = new player(playerid, \"player\" + playerid, color);\r\n        newplayer.reset();\r\n        return newplayer;\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = PlayerFactory;\r\n\n\n//# sourceURL=webpack://myrisk/./src/player.js?");

/***/ }),

/***/ "./src/playerstats.js":
/*!****************************!*\
  !*** ./src/playerstats.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var consts = __webpack_require__(/*! ./consts */ \"./src/consts.js\");\r\nvar gameplayers = __webpack_require__(/*! ./gameplayers */ \"./src/gameplayers.js\");\r\nvar canvas = __webpack_require__(/*! ./canvas */ \"./src/canvas.js\");\r\nvar currentplayer = 0;\r\n\r\nvar gamestats = [];\r\n\r\nvar playerrows = [];\r\nvar players = gameplayers.getAllPlayers();\r\n\r\nvar PlayerStats = {\r\n    init: function () {\r\n\r\n        var table = document.getElementById(\"playertable\");\r\n\r\n        // build the heading row\r\n        var tableheadings = consts.GAMESTATS_HEADINGS;\r\n        var headingrow = document.createElement(\"tr\");\r\n        tableheadings.forEach(heading => {\r\n            var elem = document.createElement(\"th\");\r\n            elem.innerText = heading;\r\n            headingrow.appendChild(elem);\r\n        })\r\n        table.appendChild(headingrow);\r\n\r\n        // build the data rows\r\n        players.forEach(player => {\r\n            var playerrow = document.createElement(\"tr\");\r\n            playerrow.playerobj = player;\r\n            playerrows.push(playerrow);\r\n            table.appendChild(playerrow);\r\n\r\n            // player name\r\n            var namecol = document.createElement(\"td\");\r\n            namecol.innerText = player.getName();\r\n            namecol.style.backgroundColor = player.getColor();\r\n            playerrow.appendChild(namecol);\r\n\r\n            // continents\r\n            var contcol = document.createElement(\"td\");\r\n            playerrow.appendChild(contcol);\r\n\r\n            // regions\r\n            var regcol = document.createElement(\"td\");\r\n            playerrow.appendChild(regcol);\r\n\r\n            // troops\r\n            var troopcol = document.createElement(\"td\");\r\n            playerrow.appendChild(troopcol);\r\n\r\n            // drafts\r\n            var draftcol = document.createElement(\"td\");\r\n            playerrow.appendChild(draftcol);\r\n\r\n            // cards\r\n            var cardcol = document.createElement(\"td\");\r\n            playerrow.appendChild(cardcol);\r\n\r\n            // gamestats\r\n            gamestats.push({\r\n                player: player,\r\n                contcol: contcol,\r\n                regcol: regcol,\r\n                troopcol: troopcol,\r\n                draftcol: draftcol,\r\n                cardcol: cardcol\r\n            })\r\n\r\n        })\r\n    },\r\n    reset: function () {\r\n        playerrows[currentplayer].classList.remove(\"activeplayer\");\r\n        currentplayer = 0;\r\n        playerrows[currentplayer].classList.add(\"activeplayer\");\r\n        playerrows[currentplayer].playerobj.startTurn();\r\n    },\r\n    updateStats: function () {\r\n\r\n        gamestats.forEach(stat => {\r\n            stat.contcol.innerText = stat.player.getState().continents.length;\r\n            stat.regcol.innerText = stat.player.getState().regions.length;\r\n            stat.troopcol.innerText = stat.player.getState().getTroopCount();\r\n            stat.draftcol.innerText = stat.player.getState().draft;\r\n            stat.cardcol.innerText = stat.player.getState().cards.map(c=>c.display).join();\r\n        });\r\n\r\n        var nodraftleft = gamestats[currentplayer].player.getState().draft == 0;\r\n        canvas.enablewar(nodraftleft);\r\n        canvas.enableendturn(nodraftleft);\r\n        canvas.enablesellcards(gamestats[currentplayer].player.getState().cards.length >= 3);\r\n    },\r\n    nextPlayer: function () {\r\n        var nextplayer = getNextPlayer(currentplayer);\r\n        if (currentplayer == nextplayer) {\r\n            // game over. currentplayer has won\r\n            alert(\"GAME OVER: \" + playerrows[currentplayer].playerobj.getName() + \" has won\");\r\n            return null;\r\n        } else {\r\n            playerrows[currentplayer].classList.remove(\"activeplayer\");\r\n            playerrows[nextplayer].classList.add(\"activeplayer\");\r\n            currentplayer = nextplayer;\r\n            return playerrows[nextplayer].playerobj;\r\n        }\r\n\r\n        function getNextPlayer(rowindex) {\r\n            nextplayer = rowindex < playerrows.length - 1 ? rowindex + 1 : 0;\r\n            if (playerrows[nextplayer].playerobj.isDead()) return getNextPlayer(nextplayer);\r\n            return nextplayer;\r\n        }\r\n    },\r\n    getFirstPlayer: function () {\r\n        return playerrows[0].playerobj;\r\n    },\r\n    sellCards: function() {\r\n        playerrows[currentplayer].playerobj.sellCards();\r\n    }\r\n}\r\n\r\nmodule.exports = PlayerStats;\n\n//# sourceURL=webpack://myrisk/./src/playerstats.js?");

/***/ }),

/***/ "./src/region.js":
/*!***********************!*\
  !*** ./src/region.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var canvas = __webpack_require__(/*! ./canvas */ \"./src/canvas.js\");\r\nvar consts = __webpack_require__(/*! ./consts.js */ \"./src/consts.js\");\r\nvar gamestate = __webpack_require__(/*! ./gamestate.js */ \"./src/gamestate.js\");\r\nvar playerstats = __webpack_require__(/*! ./playerstats.js */ \"./src/playerstats.js\");\r\nvar gamecontroller = __webpack_require__(/*! ./gamecontroller.js */ \"./src/gamecontroller.js\");\r\n\r\nfunction region(row, col, contobj) {\r\n    var elementid = \"region_\" + row + \"_\" + col;\r\n    var row = row;\r\n    var col = col;\r\n    var continent = contobj;\r\n    var troopcount = 0;\r\n    var occupant = null;\r\n    var element = getRegionElement();\r\n    var selected = false;\r\n    var self = this;\r\n\r\n    function getRegionElement() {\r\n        var reg = document.createElement(\"button\");\r\n        reg.id = elementid;\r\n        reg.style.height = consts.REGION_HEIGHT + \"px\";\r\n        reg.style.width = consts.REGION_WIDTH + \"px\";\r\n        reg.style.color = \"blue\";\r\n        reg.innerText = troopcount;\r\n        reg.addEventListener(\"click\", clickedbutton);\r\n\r\n        return reg;\r\n    }\r\n\r\n    this.addTroops = function() {\r\n\r\n        if (!occupant.reduceDraft()) return false; // no troops to reduce, so do nothing\r\n\r\n        troopcount++;\r\n        element.innerText = troopcount;\r\n        playerstats.updateStats();\r\n        return true;\r\n    }\r\n\r\n    function selectregion() {\r\n        self.toggleSelection();\r\n        gamecontroller.setSelectedRegion(self);\r\n    }\r\n\r\n    function clickedbutton() {\r\n        console.log(\"coords: \" + elementid);\r\n        console.log(\"row: \" + continent.getRow() + \";col: \" + continent.getColumn());\r\n\r\n        switch (gamestate.getGameState()) {\r\n            case gamestate.StartState: {\r\n                self.addTroops();\r\n                break;\r\n            }\r\n            case gamestate.BattleState: {\r\n                selectregion();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    this.element = element;\r\n\r\n    this.id = elementid;\r\n\r\n    this.init = function() {\r\n        this.reset();\r\n    }\r\n\r\n    this.isSelected = function() {\r\n        return selected;\r\n    }\r\n\r\n    this.toggleSelection = function() {\r\n\r\n        selected = !selected;\r\n        this.setSelection(selected);\r\n    }\r\n\r\n    this.setSelection = function(selection) {\r\n        selected = selection;\r\n        if (selected) {\r\n            element.style.border = \"2px solid black\";\r\n        } else {\r\n            element.style.border = \"2px solid \" + occupant.getColor();\r\n        }\r\n    } \r\n\r\n    this.gameStateChange = function() {\r\n        switch (gamestate.getGameState()) {\r\n            case gamestate.StartState: {\r\n                element.style.border = \"\";\r\n                break;\r\n            }\r\n            case gamestate.BattleState: {\r\n                element.style.border = \"2px solid \" + occupant.getColor();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    this.getTroopCount = function () {\r\n        return troopcount;\r\n    }\r\n\r\n    this.setTroopCount = function (count) {\r\n        troopcount = count;\r\n        this.element.innerText = count;\r\n    }\r\n\r\n    this.increaseTroopCount = function () {\r\n        this.setTroopCount(troopcount + 1);\r\n    }\r\n\r\n    this.decreaseTroopCount = function (count) {\r\n        this.setTroopCount(troopcount - count);\r\n    }\r\n\r\n    this.reset = function () {\r\n        this.setTroopCount(0);\r\n        this.gameStateChange(gamestate.StartState);\r\n    }\r\n\r\n    this.setPlayer = function (player) {\r\n        occupant = player;\r\n        this.element.style.backgroundColor = occupant.getColor();\r\n    }\r\n\r\n    this.getPlayer = function() {\r\n        return occupant;\r\n    }\r\n\r\n    this.isSame = function(region) {\r\n        return elementid == region.id;\r\n    }\r\n\r\n    this.getContinent = function() {\r\n        return continent;\r\n    }\r\n\r\n    this.getRow = function() {\r\n        return row;\r\n    }\r\n\r\n    this.getColumn = function() {\r\n        return col;\r\n    }\r\n\r\n    this.canAttack = function(region) {\r\n\r\n        var attackX = this.getRow();\r\n        var attackY = this.getColumn();\r\n        var defendX = region.getRow();\r\n        var defendY = region.getColumn();\r\n        \r\n        var can = defendX <= attackX + 1 && defendX >= attackX - 1;\r\n        can = can && defendY <= attackY + 1 && defendY >= attackY - 1;\r\n        return can;\r\n    }\r\n}\r\n\r\nvar RegionFactory = {\r\n    getRegionInstance: function (row, col, contobj) {\r\n        gamecontroller = gamecontroller;\r\n        var instance = new region(row, col, contobj);\r\n        instance.init();\r\n        return instance;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = RegionFactory;\r\n\n\n//# sourceURL=webpack://myrisk/./src/region.js?");

/***/ }),

/***/ "./src/util.js":
/*!*********************!*\
  !*** ./src/util.js ***!
  \*********************/
/***/ ((module) => {

eval("var Util = {\r\n    shuffleArray: function(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    },\r\n    isAllUnique: function(array) {\r\n        for (let i=0; i < array.length - 1;i++) {\r\n            for (let j=i+1; j < array.length;j++) {\r\n                if (array[i] == array[j]) return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nmodule.exports = Util;\n\n//# sourceURL=webpack://myrisk/./src/util.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;